{"id":"../node_modules/nexmo/lib/Account.js","dependencies":[{"name":"/home/harpal/Konfinity/css/package.json","includedInParent":true,"mtime":1586415617677},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/package.json","includedInParent":true,"mtime":1586157323327},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"./index","loc":{"line":9,"column":21},"parent":"/home/harpal/Konfinity/css/node_modules/nexmo/lib/Account.js","resolved":"/home/harpal/Konfinity/css/node_modules/nexmo/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Account = function () {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Account options.\n   */\n  function Account(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Account);\n\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || _index2.default;\n\n    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);\n  }\n\n  /**\n   * TODO: document\n   */\n\n\n  _createClass(Account, [{\n    key: \"checkBalance\",\n    value: function checkBalance(callback) {\n      return this.options.rest.get(\"/account/get-balance\", callback);\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(newSecret, callback) {\n      return this.options.rest.postUseQueryString(\"/account/settings\", { newSecret: newSecret }, callback);\n    }\n  }, {\n    key: \"updateSMSCallback\",\n    value: function updateSMSCallback(moCallBackUrl, callback) {\n      return this.options.rest.postUseQueryString(\"/account/settings\", { moCallBackUrl: moCallBackUrl }, callback);\n    }\n  }, {\n    key: \"updateDeliveryReceiptCallback\",\n    value: function updateDeliveryReceiptCallback(drCallBackUrl, callback) {\n      return this.options.rest.postUseQueryString(\"/account/settings\", { drCallBackUrl: drCallBackUrl }, callback);\n    }\n  }, {\n    key: \"topUp\",\n    value: function topUp(trx, callback) {\n      return this.options.rest.postUseQueryString(\"/account/top-up\", { trx: trx }, callback);\n    }\n  }, {\n    key: \"listSecrets\",\n    value: function listSecrets(apiKey, callback) {\n      return this.options.api.get(\"/accounts/\" + apiKey + \"/secrets\", {}, callback, false, true);\n    }\n  }, {\n    key: \"getSecret\",\n    value: function getSecret(apiKey, id, callback) {\n      return this.options.api.get(\"/accounts/\" + apiKey + \"/secrets/\" + id, {}, callback, false, true);\n    }\n  }, {\n    key: \"createSecret\",\n    value: function createSecret(apiKey, secret, callback) {\n      return this.options.api.postJson(\"/accounts/\" + apiKey + \"/secrets/\", { secret: secret }, callback, false, true);\n    }\n  }, {\n    key: \"deleteSecret\",\n    value: function deleteSecret(apiKey, id, callback) {\n      return this.options.api.delete(\"/accounts/\" + apiKey + \"/secrets/\" + id, callback, false, true);\n    }\n  }]);\n\n  return Account;\n}();\n\nexports.default = Account;\nmodule.exports = exports[\"default\"];\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/Account.js"],"names":["Account","credentials","options","creds","_nexmo","nexmoOverride","initialize","apiKey","apiSecret","callback","rest","get","newSecret","postUseQueryString","moCallBackUrl","drCallBackUrl","trx","api","id","secret","postJson","delete"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;IAEMA,O;AACJ;;;;;;AAMA,mBAAYC,WAAZ,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACrC,SAAKC,KAAL,GAAaF,WAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;;AAEA;AACA,SAAKE,MAAL,GAAc,KAAKF,OAAL,CAAaG,aAAb,mBAAd;;AAEA,SAAKD,MAAL,CAAYE,UAAZ,CACE,KAAKH,KAAL,CAAWI,MADb,EAEE,KAAKJ,KAAL,CAAWK,SAFb,EAGE,KAAKN,OAHP;AAKD;;AAED;;;;;;;iCAGaO,Q,EAAU;AACrB,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBC,GAAlB,CAAsB,sBAAtB,EAA8CF,QAA9C,CAAP;AACD;;;mCAEcG,S,EAAWH,Q,EAAU;AAClC,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBG,kBAAlB,CACL,mBADK,EAEL,EAAED,oBAAF,EAFK,EAGLH,QAHK,CAAP;AAKD;;;sCAEiBK,a,EAAeL,Q,EAAU;AACzC,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBG,kBAAlB,CACL,mBADK,EAEL,EAAEC,4BAAF,EAFK,EAGLL,QAHK,CAAP;AAKD;;;kDAE6BM,a,EAAeN,Q,EAAU;AACrD,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBG,kBAAlB,CACL,mBADK,EAEL,EAAEE,4BAAF,EAFK,EAGLN,QAHK,CAAP;AAKD;;;0BAEKO,G,EAAKP,Q,EAAU;AACnB,aAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBG,kBAAlB,CACL,iBADK,EAEL,EAAEG,QAAF,EAFK,EAGLP,QAHK,CAAP;AAKD;;;gCAEWF,M,EAAQE,Q,EAAU;AAC5B,aAAO,KAAKP,OAAL,CAAae,GAAb,CAAiBN,GAAjB,CACL,eAAeJ,MAAf,GAAwB,UADnB,EAEL,EAFK,EAGLE,QAHK,EAIL,KAJK,EAKL,IALK,CAAP;AAOD;;;8BAESF,M,EAAQW,E,EAAIT,Q,EAAU;AAC9B,aAAO,KAAKP,OAAL,CAAae,GAAb,CAAiBN,GAAjB,CACL,eAAeJ,MAAf,GAAwB,WAAxB,GAAsCW,EADjC,EAEL,EAFK,EAGLT,QAHK,EAIL,KAJK,EAKL,IALK,CAAP;AAOD;;;iCAEYF,M,EAAQY,M,EAAQV,Q,EAAU;AACrC,aAAO,KAAKP,OAAL,CAAae,GAAb,CAAiBG,QAAjB,CACL,eAAeb,MAAf,GAAwB,WADnB,EAEL,EAAEY,QAAQA,MAAV,EAFK,EAGLV,QAHK,EAIL,KAJK,EAKL,IALK,CAAP;AAOD;;;iCAEYF,M,EAAQW,E,EAAIT,Q,EAAU;AACjC,aAAO,KAAKP,OAAL,CAAae,GAAb,CAAiBI,MAAjB,CACL,eAAed,MAAf,GAAwB,WAAxB,GAAsCW,EADjC,EAELT,QAFK,EAGL,KAHK,EAIL,IAJK,CAAP;AAMD;;;;;;kBAGYT,O","file":"Account.js","sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nclass Account {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Account options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || nexmo;\n\n    this._nexmo.initialize(\n      this.creds.apiKey,\n      this.creds.apiSecret,\n      this.options\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  checkBalance(callback) {\n    return this.options.rest.get(\"/account/get-balance\", callback);\n  }\n\n  updatePassword(newSecret, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { newSecret },\n      callback\n    );\n  }\n\n  updateSMSCallback(moCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { moCallBackUrl },\n      callback\n    );\n  }\n\n  updateDeliveryReceiptCallback(drCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { drCallBackUrl },\n      callback\n    );\n  }\n\n  topUp(trx, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/top-up\",\n      { trx },\n      callback\n    );\n  }\n\n  listSecrets(apiKey, callback) {\n    return this.options.api.get(\n      \"/accounts/\" + apiKey + \"/secrets\",\n      {},\n      callback,\n      false,\n      true\n    );\n  }\n\n  getSecret(apiKey, id, callback) {\n    return this.options.api.get(\n      \"/accounts/\" + apiKey + \"/secrets/\" + id,\n      {},\n      callback,\n      false,\n      true\n    );\n  }\n\n  createSecret(apiKey, secret, callback) {\n    return this.options.api.postJson(\n      \"/accounts/\" + apiKey + \"/secrets/\",\n      { secret: secret },\n      callback,\n      false,\n      true\n    );\n  }\n\n  deleteSecret(apiKey, id, callback) {\n    return this.options.api.delete(\n      \"/accounts/\" + apiKey + \"/secrets/\" + id,\n      callback,\n      false,\n      true\n    );\n  }\n}\n\nexport default Account;\n"]}},"error":null,"hash":"5b5be837dc76148eb0f76d70b195a075","cacheData":{"env":{}}}