{"id":"../node_modules/nexmo/lib/FilesResource.js","dependencies":[{"name":"/home/harpal/Konfinity/css/package.json","includedInParent":true,"mtime":1586415617677},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/package.json","includedInParent":true,"mtime":1586157323327},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"fs","loc":{"line":11,"column":17},"parent":"/home/harpal/Konfinity/css/node_modules/nexmo/lib/FilesResource.js","resolved":"/home/harpal/.nvm/versions/node/v12.16.1/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar fs = require(\"fs\");\n\nvar FilesResource = function () {\n  _createClass(FilesResource, null, [{\n    key: \"PATH\",\n\n    /**\n     * The path to the `calls` resource.\n     */\n    get: function get() {\n      return \"/v1/files\";\n    }\n\n    /**\n     * Creates a new FilesResource.\n     *\n     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n     * @param {Object} options - additional options for the class.\n     */\n\n  }]);\n\n  function FilesResource(creds, options) {\n    _classCallCheck(this, FilesResource);\n\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Get stream for a remote File\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n\n  _createClass(FilesResource, [{\n    key: \"get\",\n    value: function get(fileIdOrUrl, callback) {\n      if (!fileIdOrUrl) {\n        throw new Error('\"fileIdOrUrl\" is a required parameter');\n      }\n\n      fileIdOrUrl = fileIdOrUrl.split(\"/\").pop(-1);\n\n      var config = {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: FilesResource.PATH + \"/\" + fileIdOrUrl,\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/octet-stream\",\n          Authorization: \"Bearer \" + this.creds.generateJwt()\n        }\n      };\n\n      this.options.httpClient.request(config, callback);\n    }\n\n    /**\n     * Save remote File locally\n     *\n     * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n     * @param {string} [file] - Filename or file descriptor\n     * @param {function} callback - function to be called when the request completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function save(fileIdOrUrl, file, callback) {\n      var _this = this;\n\n      this.get(fileIdOrUrl, function (error, data) {\n        if (error) {\n          callback(error, null);\n        } else {\n          _this.__storeFile(data, file, callback);\n        }\n      });\n    }\n  }, {\n    key: \"__storeFile\",\n    value: function __storeFile(data, file, callback) {\n      fs.writeFile(file, data, function (error) {\n        if (error) {\n          callback(error, null);\n        } else {\n          callback(null, file);\n        }\n      });\n    }\n  }]);\n\n  return FilesResource;\n}();\n\nexports.default = FilesResource;\nmodule.exports = exports[\"default\"];\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/FilesResource.js"],"names":["fs","require","FilesResource","creds","options","fileIdOrUrl","callback","Error","split","pop","config","host","apiHost","path","PATH","method","headers","Authorization","generateJwt","httpClient","request","file","get","error","data","__storeFile","writeFile"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;IAEMC,a;;;;AACJ;;;wBAGkB;AAChB,aAAO,WAAP;AACD;;AAED;;;;;;;;;AAMA,yBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAC1B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAED;;;;;;;;;;wBAMIC,W,EAAaC,Q,EAAU;AACzB,UAAI,CAACD,WAAL,EAAkB;AAChB,cAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAEDF,oBAAcA,YAAYG,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B,CAAC,CAA5B,CAAd;;AAEA,UAAIC,SAAS;AACXC,cAAM,KAAKP,OAAL,CAAaQ,OAAb,IAAwB,eADnB;AAEXC,cAASX,cAAcY,IAAvB,SAA+BT,WAFpB;AAGXU,gBAAQ,KAHG;AAIXC,iBAAS;AACP,0BAAgB,0BADT;AAEPC,qCAAyB,KAAKd,KAAL,CAAWe,WAAX;AAFlB;AAJE,OAAb;;AAUA,WAAKd,OAAL,CAAae,UAAb,CAAwBC,OAAxB,CAAgCV,MAAhC,EAAwCJ,QAAxC;AACD;;AAED;;;;;;;;;;yBAOKD,W,EAAagB,I,EAAMf,Q,EAAU;AAAA;;AAChC,WAAKgB,GAAL,CAASjB,WAAT,EAAsB,UAACkB,KAAD,EAAQC,IAAR,EAAiB;AACrC,YAAID,KAAJ,EAAW;AACTjB,mBAASiB,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACL,gBAAKE,WAAL,CAAiBD,IAAjB,EAAuBH,IAAvB,EAA6Bf,QAA7B;AACD;AACF,OAND;AAOD;;;gCAEWkB,I,EAAMH,I,EAAMf,Q,EAAU;AAChCN,SAAG0B,SAAH,CAAaL,IAAb,EAAmBG,IAAnB,EAAyB,iBAAS;AAChC,YAAID,KAAJ,EAAW;AACTjB,mBAASiB,KAAT,EAAgB,IAAhB;AACD,SAFD,MAEO;AACLjB,mBAAS,IAAT,EAAee,IAAf;AACD;AACF,OAND;AAOD;;;;;;kBAGYnB,a","file":"FilesResource.js","sourcesContent":["\"use strict\";\n\nvar fs = require(\"fs\");\n\nclass FilesResource {\n  /**\n   * The path to the `calls` resource.\n   */\n  static get PATH() {\n    return \"/v1/files\";\n  }\n\n  /**\n   * Creates a new FilesResource.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n  }\n\n  /**\n   * Get stream for a remote File\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(fileIdOrUrl, callback) {\n    if (!fileIdOrUrl) {\n      throw new Error('\"fileIdOrUrl\" is a required parameter');\n    }\n\n    fileIdOrUrl = fileIdOrUrl.split(\"/\").pop(-1);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${FilesResource.PATH}/${fileIdOrUrl}`,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/octet-stream\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`\n      }\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Save remote File locally\n   *\n   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file\n   * @param {string} [file] - Filename or file descriptor\n   * @param {function} callback - function to be called when the request completes.\n   */\n  save(fileIdOrUrl, file, callback) {\n    this.get(fileIdOrUrl, (error, data) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        this.__storeFile(data, file, callback);\n      }\n    });\n  }\n\n  __storeFile(data, file, callback) {\n    fs.writeFile(file, data, error => {\n      if (error) {\n        callback(error, null);\n      } else {\n        callback(null, file);\n      }\n    });\n  }\n}\n\nexport default FilesResource;\n"]}},"error":null,"hash":"b8ee5d0f6ccec229a6d4a94136b8acb9","cacheData":{"env":{}}}