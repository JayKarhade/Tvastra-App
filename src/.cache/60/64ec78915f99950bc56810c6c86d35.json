{"id":"../node_modules/nexmo/lib/NumberInsight.js","dependencies":[{"name":"/home/harpal/Konfinity/css/package.json","includedInParent":true,"mtime":1586415617677},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/package.json","includedInParent":true,"mtime":1586157323327},{"name":"/home/harpal/Konfinity/css/node_modules/nexmo/.babelrc","includedInParent":true,"mtime":499162500000},{"name":"./index","loc":{"line":9,"column":21},"parent":"/home/harpal/Konfinity/css/node_modules/nexmo/lib/NumberInsight.js","resolved":"/home/harpal/Konfinity/css/node_modules/nexmo/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _index = require(\"./index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NumberInsight = function () {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  function NumberInsight(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, NumberInsight);\n\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || _index2.default;\n\n    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Nexmo platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n\n\n  _createClass(NumberInsight, [{\n    key: \"get\",\n    value: function get(options, callback) {\n      var level = options.level;\n      // remove 'level' as it's a library-only parameter\n      delete options.level;\n\n      if (level === \"advanced\" || level === \"advancedAsync\") {\n        if (level === \"advanced\") {\n          console.warn('DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.');\n        }\n        this._nexmo.numberInsightAdvancedAsync.apply(this._nexmo, arguments);\n      } else if (level === \"advancedSync\") {\n        this._nexmo.numberInsightAdvanced.apply(this._nexmo, arguments);\n      } else if (level === \"standard\") {\n        this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);\n      } else {\n        this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);\n      }\n    }\n  }]);\n\n  return NumberInsight;\n}();\n\nexports.default = NumberInsight;\nmodule.exports = exports[\"default\"];\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/NumberInsight.js"],"names":["NumberInsight","credentials","options","creds","_nexmo","nexmoOverride","initialize","apiKey","apiSecret","callback","level","console","warn","numberInsightAdvancedAsync","apply","arguments","numberInsightAdvanced","numberInsightStandard","numberInsightBasic"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;IAEMA,a;AACJ;;;;;;AAMA,yBAAYC,WAAZ,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACrC,SAAKC,KAAL,GAAaF,WAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;;AAEA;AACA,SAAKE,MAAL,GAAc,KAAKF,OAAL,CAAaG,aAAb,mBAAd;;AAEA,SAAKD,MAAL,CAAYE,UAAZ,CACE,KAAKH,KAAL,CAAWI,MADb,EAEE,KAAKJ,KAAL,CAAWK,SAFb,EAGE,KAAKN,OAHP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA8CIA,O,EAASO,Q,EAAU;AACrB,UAAIC,QAAQR,QAAQQ,KAApB;AACA;AACA,aAAOR,QAAQQ,KAAf;;AAEA,UAAIA,UAAU,UAAV,IAAwBA,UAAU,eAAtC,EAAuD;AACrD,YAAIA,UAAU,UAAd,EAA0B;AACxBC,kBAAQC,IAAR,CACE,gLADF;AAGD;AACD,aAAKR,MAAL,CAAYS,0BAAZ,CAAuCC,KAAvC,CAA6C,KAAKV,MAAlD,EAA0DW,SAA1D;AACD,OAPD,MAOO,IAAIL,UAAU,cAAd,EAA8B;AACnC,aAAKN,MAAL,CAAYY,qBAAZ,CAAkCF,KAAlC,CAAwC,KAAKV,MAA7C,EAAqDW,SAArD;AACD,OAFM,MAEA,IAAIL,UAAU,UAAd,EAA0B;AAC/B,aAAKN,MAAL,CAAYa,qBAAZ,CAAkCH,KAAlC,CAAwC,KAAKV,MAA7C,EAAqDW,SAArD;AACD,OAFM,MAEA;AACL,aAAKX,MAAL,CAAYc,kBAAZ,CAA+BJ,KAA/B,CAAqC,KAAKV,MAA1C,EAAkDW,SAAlD;AACD;AACF;;;;;;kBAGYf,a","file":"NumberInsight.js","sourcesContent":["\"use strict\";\n\nimport nexmo from \"./index\";\n\nclass NumberInsight {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    // Used to facilitate testing of the call to the underlying object\n    this._nexmo = this.options.nexmoOverride || nexmo;\n\n    this._nexmo.initialize(\n      this.creds.apiKey,\n      this.creds.apiSecret,\n      this.options\n    );\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Nexmo platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n  get(options, callback) {\n    var level = options.level;\n    // remove 'level' as it's a library-only parameter\n    delete options.level;\n\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn(\n          'DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.'\n        );\n      }\n      this._nexmo.numberInsightAdvancedAsync.apply(this._nexmo, arguments);\n    } else if (level === \"advancedSync\") {\n      this._nexmo.numberInsightAdvanced.apply(this._nexmo, arguments);\n    } else if (level === \"standard\") {\n      this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);\n    } else {\n      this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);\n    }\n  }\n}\n\nexport default NumberInsight;\n"]}},"error":null,"hash":"8136cc89fbd191f1b885c0f03a017311","cacheData":{"env":{}}}